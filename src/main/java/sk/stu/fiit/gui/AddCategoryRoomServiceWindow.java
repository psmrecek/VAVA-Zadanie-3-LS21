/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.gui;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sk.stu.fiit.inputs.InputProcessor;
import sk.stu.fiit.logic.*;

/**
 *
 * @author PeterSmrecek
 */
public class AddCategoryRoomServiceWindow extends javax.swing.JFrame {

    /**
     * Creates new form Buttons
     */
    private Hotel hotel;
    private ArrayList<String> listCategoriesNames;
    private ArrayList<Category> listCategories;
    ArrayList<ImageIcon> listImages = new ArrayList<>();
    final JFileChooser fc = new JFileChooser();
    private int currentImageId = -1;
    
    public AddCategoryRoomServiceWindow(Hotel hotel) {
        initComponents();
        this.hotel = hotel;
        
        refreshAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        servicePnl = new javax.swing.JPanel();
        servicePriceLbl = new javax.swing.JLabel();
        serviceNameTf = new javax.swing.JTextField();
        servicePriceTf = new javax.swing.JTextField();
        addServiceBtn = new javax.swing.JButton();
        serviceNameLbl = new javax.swing.JLabel();
        titleServiceLbl = new javax.swing.JLabel();
        servicesScroll = new javax.swing.JScrollPane();
        servicesTbl = new javax.swing.JTable();
        categoryPnl = new javax.swing.JPanel();
        catNoteLbl = new javax.swing.JLabel();
        catPriceLbl = new javax.swing.JLabel();
        catPriceTf = new javax.swing.JTextField();
        catNoteTf = new javax.swing.JTextField();
        catNameTf = new javax.swing.JTextField();
        addCategoryBtn = new javax.swing.JButton();
        catNameLbl = new javax.swing.JLabel();
        titleCategoryLbl = new javax.swing.JLabel();
        categoriesScroll = new javax.swing.JScrollPane();
        categoriesTbl = new javax.swing.JTable();
        roomPnl = new javax.swing.JPanel();
        roomNoteTf = new javax.swing.JTextField();
        roomNameTf = new javax.swing.JTextField();
        roomNameLbl = new javax.swing.JLabel();
        roomNoteLbl = new javax.swing.JLabel();
        roomCategoryLbl = new javax.swing.JLabel();
        roomPicturesLbl = new javax.swing.JLabel();
        titleRoomLbl = new javax.swing.JLabel();
        categoryCb = new javax.swing.JComboBox<>();
        pictureLbl = new javax.swing.JLabel();
        previousBtn = new javax.swing.JButton();
        numberLbl = new javax.swing.JLabel();
        nextBtn = new javax.swing.JButton();
        addImageBtn = new javax.swing.JButton();
        addRoomBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pridať službu, kategóriu alebo izbu");

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1.setLayout(jPanel1Layout);

        servicePnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Služby"));
        java.awt.GridBagLayout servicePnlLayout = new java.awt.GridBagLayout();
        servicePnlLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
        servicePnlLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0};
        servicePnl.setLayout(servicePnlLayout);

        servicePriceLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        servicePriceLbl.setText("Cena");
        servicePriceLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        servicePriceLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        servicePnl.add(servicePriceLbl, gridBagConstraints);

        serviceNameTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        serviceNameTf.setMinimumSize(new java.awt.Dimension(200, 26));
        serviceNameTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        servicePnl.add(serviceNameTf, gridBagConstraints);

        servicePriceTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        servicePriceTf.setMinimumSize(new java.awt.Dimension(200, 26));
        servicePriceTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        servicePnl.add(servicePriceTf, gridBagConstraints);

        addServiceBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addServiceBtn.setText("Pridať službu");
        addServiceBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addServiceBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        servicePnl.add(addServiceBtn, gridBagConstraints);

        serviceNameLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        serviceNameLbl.setText("Popis");
        serviceNameLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        serviceNameLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        servicePnl.add(serviceNameLbl, gridBagConstraints);

        titleServiceLbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleServiceLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleServiceLbl.setText("Pridať službu");
        titleServiceLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        titleServiceLbl.setPreferredSize(new java.awt.Dimension(450, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        servicePnl.add(titleServiceLbl, gridBagConstraints);

        servicesScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka služieb", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        servicesScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        servicesScroll.setMinimumSize(new java.awt.Dimension(375, 150));

        servicesTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        servicesTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Služba", "Cena"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        servicesTbl.setMinimumSize(new java.awt.Dimension(375, 150));
        servicesTbl.getTableHeader().setReorderingAllowed(false);
        servicesScroll.setViewportView(servicesTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 7;
        servicePnl.add(servicesScroll, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 7;
        jPanel1.add(servicePnl, gridBagConstraints);

        categoryPnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Kategórie"));
        java.awt.GridBagLayout categoryPnlLayout = new java.awt.GridBagLayout();
        categoryPnlLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        categoryPnlLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        categoryPnl.setLayout(categoryPnlLayout);

        catNoteLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        catNoteLbl.setText("Popis");
        catNoteLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        catNoteLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        categoryPnl.add(catNoteLbl, gridBagConstraints);

        catPriceLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        catPriceLbl.setText("Cena");
        catPriceLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        catPriceLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        categoryPnl.add(catPriceLbl, gridBagConstraints);

        catPriceTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        catPriceTf.setMinimumSize(new java.awt.Dimension(200, 26));
        catPriceTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        categoryPnl.add(catPriceTf, gridBagConstraints);

        catNoteTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        catNoteTf.setMinimumSize(new java.awt.Dimension(200, 26));
        catNoteTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        categoryPnl.add(catNoteTf, gridBagConstraints);

        catNameTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        catNameTf.setMinimumSize(new java.awt.Dimension(200, 26));
        catNameTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        categoryPnl.add(catNameTf, gridBagConstraints);

        addCategoryBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addCategoryBtn.setText("Pridať kategóriu");
        addCategoryBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addCategoryBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        categoryPnl.add(addCategoryBtn, gridBagConstraints);

        catNameLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        catNameLbl.setText("Názov");
        catNameLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        catNameLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        categoryPnl.add(catNameLbl, gridBagConstraints);

        titleCategoryLbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleCategoryLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleCategoryLbl.setText("Pridať kategóriu");
        titleCategoryLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        titleCategoryLbl.setPreferredSize(new java.awt.Dimension(450, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        categoryPnl.add(titleCategoryLbl, gridBagConstraints);

        categoriesScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka kategórií izieb", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        categoriesScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        categoriesScroll.setMinimumSize(new java.awt.Dimension(375, 150));

        categoriesTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        categoriesTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kategória", "Cena"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        categoriesTbl.setMinimumSize(new java.awt.Dimension(375, 150));
        categoriesTbl.getTableHeader().setReorderingAllowed(false);
        categoriesScroll.setViewportView(categoriesTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 9;
        categoryPnl.add(categoriesScroll, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(categoryPnl, gridBagConstraints);

        roomPnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Izby"));
        java.awt.GridBagLayout roomPnlLayout = new java.awt.GridBagLayout();
        roomPnlLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        roomPnlLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        roomPnl.setLayout(roomPnlLayout);

        roomNoteTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNoteTf.setMinimumSize(new java.awt.Dimension(200, 26));
        roomNoteTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        roomPnl.add(roomNoteTf, gridBagConstraints);

        roomNameTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNameTf.setMinimumSize(new java.awt.Dimension(200, 26));
        roomNameTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        roomPnl.add(roomNameTf, gridBagConstraints);

        roomNameLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNameLbl.setText("Meno");
        roomNameLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        roomNameLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        roomPnl.add(roomNameLbl, gridBagConstraints);

        roomNoteLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNoteLbl.setText("Poznámka");
        roomNoteLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        roomNoteLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        roomPnl.add(roomNoteLbl, gridBagConstraints);

        roomCategoryLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomCategoryLbl.setText("Kategória");
        roomCategoryLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        roomCategoryLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        roomPnl.add(roomCategoryLbl, gridBagConstraints);

        roomPicturesLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomPicturesLbl.setText("Obrázky");
        roomPicturesLbl.setMinimumSize(new java.awt.Dimension(200, 20));
        roomPicturesLbl.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        roomPnl.add(roomPicturesLbl, gridBagConstraints);

        titleRoomLbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleRoomLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleRoomLbl.setText("Pridať izbu");
        titleRoomLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        titleRoomLbl.setPreferredSize(new java.awt.Dimension(450, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        roomPnl.add(titleRoomLbl, gridBagConstraints);

        categoryCb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        categoryCb.setToolTipText("");
        categoryCb.setMinimumSize(new java.awt.Dimension(200, 26));
        categoryCb.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        roomPnl.add(categoryCb, gridBagConstraints);

        pictureLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        pictureLbl.setMinimumSize(new java.awt.Dimension(200, 200));
        pictureLbl.setPreferredSize(new java.awt.Dimension(200, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 13;
        roomPnl.add(pictureLbl, gridBagConstraints);

        previousBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        previousBtn.setText("<--");
        previousBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                previousBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        roomPnl.add(previousBtn, gridBagConstraints);

        numberLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numberLbl.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        roomPnl.add(numberLbl, gridBagConstraints);

        nextBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nextBtn.setText("-->");
        nextBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                nextBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 14;
        roomPnl.add(nextBtn, gridBagConstraints);

        addImageBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addImageBtn.setText("Pridať obrázok");
        addImageBtn.setMaximumSize(new java.awt.Dimension(300, 29));
        addImageBtn.setMinimumSize(new java.awt.Dimension(200, 29));
        addImageBtn.setPreferredSize(new java.awt.Dimension(200, 29));
        addImageBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addImageBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        roomPnl.add(addImageBtn, gridBagConstraints);

        addRoomBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addRoomBtn.setText("Pridať izbu");
        addRoomBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addRoomBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        roomPnl.add(addRoomBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(roomPnl, gridBagConstraints);

        okBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        okBtn.setText("OK");
        okBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                okBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 28;
        jPanel1.add(okBtn, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 862, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addServiceBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addServiceBtnMouseReleased
        // TODO add your handling code here:
        
        String description = serviceNameTf.getText();
        if (InputProcessor.emptyString(description)) {
            errorPane("Pole Popis nesmie zostať prázdne!");
            return;
        }
        
        double price = -1;
        try {
            price = InputProcessor.validPriceFromString(servicePriceTf.getText());
        } catch (Exception e) {
            errorPane("Pole Cena musí byť nezáporné číslo!");
            return;
        }
        
        Service service = new Service(description, price);
        hotel.addService(service);
        serviceNameTf.setText("");
        servicePriceTf.setText("");
        refreshAll();
    }//GEN-LAST:event_addServiceBtnMouseReleased

    private void addCategoryBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCategoryBtnMouseReleased
        // TODO add your handling code here:
        
        String name = catNameTf.getText();
        if (InputProcessor.emptyString(name)) {
            errorPane("Pole Názov nesmie zostať prázdne!");
            return;
        }
        
        String info = catNoteTf.getText();
        if (InputProcessor.emptyString(info)) {
            errorPane("Pole Popis nesmie zostať prázdne!");
            return;
        }
        
        double price = -1;
        try {
            price = InputProcessor.validPriceFromString(catPriceTf.getText());
        } catch (Exception e) {
            errorPane("Pole Cena musí byť nezáporné číslo!");
            return;
        }
        
        Category category = new Category(name, info, price);
        hotel.addCategory(category);
        
        catNameTf.setText("");
        catNoteTf.setText("");
        catPriceTf.setText("");
        refreshAll();
    }//GEN-LAST:event_addCategoryBtnMouseReleased

    private void addRoomBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addRoomBtnMouseReleased
        // TODO add your handling code here:
        
        String name = roomNameTf.getText();
        if (InputProcessor.emptyString(name)) {
            errorPane("Pole Meno nesmie zostať prázdne!");
            return;
        }

        String info = roomNoteTf.getText();
        if (InputProcessor.emptyString(info)) {
            errorPane("Pole Poznámka nesmie zostať prázdne!");
            return;
        }
        
        String atribute = "";

        if (categoryCb.getSelectedItem() != null) {
            atribute = String.valueOf(categoryCb.getSelectedItem());
        }

        if (InputProcessor.emptyString(atribute)) {
            JOptionPane.showMessageDialog(rootPane,
                    "Výber kategórie nemôže byť prázdny!",
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int index = listCategoriesNames.indexOf(atribute);

        if (!InputProcessor.isPositiveInt(index)) {
            JOptionPane.showMessageDialog(rootPane,
                    "Zlý výber kategórie!",
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Category category = listCategories.get(index);
        
        Room room = new Room(info, name, category, listImages);
        roomNameTf.setText("");
        roomNoteTf.setText("");
        listImages.clear();
        currentImageId = -1;
        setImage(0);
    }//GEN-LAST:event_addRoomBtnMouseReleased

    private void okBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okBtnMouseReleased
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_okBtnMouseReleased

    private void addImageBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addImageBtnMouseReleased
        // TODO add your handling code here:
       
        int returnVal = fc.showOpenDialog(this);

        File file = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Nie je vybraný žiaden súbor!",
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            BufferedImage img = ImageIO.read(file);
            ImageIcon icon = InputProcessor.resize(img, 200);
            listImages.add(icon);
            setImage(listImages.size() - 1);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,
                    "Vybraný súbor nie je možné použiť ako logo!",
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_addImageBtnMouseReleased

    private void previousBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousBtnMouseReleased
        // TODO add your handling code here:
        int newId = currentImageId - 1;
        if (InputProcessor.isPositiveInt(newId)) {
            setImage(newId);
        }
    }//GEN-LAST:event_previousBtnMouseReleased

    private void nextBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextBtnMouseReleased
        // TODO add your handling code here:
        int newId = currentImageId + 1;
        if (newId < listImages.size()) {
            setImage(newId);
        }
    }//GEN-LAST:event_nextBtnMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategoryBtn;
    private javax.swing.JButton addImageBtn;
    private javax.swing.JButton addRoomBtn;
    private javax.swing.JButton addServiceBtn;
    private javax.swing.JLabel catNameLbl;
    private javax.swing.JTextField catNameTf;
    private javax.swing.JLabel catNoteLbl;
    private javax.swing.JTextField catNoteTf;
    private javax.swing.JLabel catPriceLbl;
    private javax.swing.JTextField catPriceTf;
    private javax.swing.JScrollPane categoriesScroll;
    private javax.swing.JTable categoriesTbl;
    private javax.swing.JComboBox<String> categoryCb;
    private javax.swing.JPanel categoryPnl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton nextBtn;
    private javax.swing.JLabel numberLbl;
    private javax.swing.JButton okBtn;
    private javax.swing.JLabel pictureLbl;
    private javax.swing.JButton previousBtn;
    private javax.swing.JLabel roomCategoryLbl;
    private javax.swing.JLabel roomNameLbl;
    private javax.swing.JTextField roomNameTf;
    private javax.swing.JLabel roomNoteLbl;
    private javax.swing.JTextField roomNoteTf;
    private javax.swing.JLabel roomPicturesLbl;
    private javax.swing.JPanel roomPnl;
    private javax.swing.JLabel serviceNameLbl;
    private javax.swing.JTextField serviceNameTf;
    private javax.swing.JPanel servicePnl;
    private javax.swing.JLabel servicePriceLbl;
    private javax.swing.JTextField servicePriceTf;
    private javax.swing.JScrollPane servicesScroll;
    private javax.swing.JTable servicesTbl;
    private javax.swing.JLabel titleCategoryLbl;
    private javax.swing.JLabel titleRoomLbl;
    private javax.swing.JLabel titleServiceLbl;
    // End of variables declaration//GEN-END:variables

    private void deleteRows(DefaultTableModel model) {
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }

    private double populateServicesTbl() {
        DefaultTableModel model = (DefaultTableModel) servicesTbl.getModel();
        deleteRows(model);

        int numberOfColumns = servicesTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Service> list = hotel.getListServices();

        Double priceServices = 0d;

        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).getName();

            Double price = list.get(i).getPrice();
            priceServices += price;
            rowData[1] = String.valueOf(price);

            model.addRow(rowData);
        }

        return priceServices;
    }
    
    private double populateCategoriesTbl() {
        DefaultTableModel model = (DefaultTableModel) categoriesTbl.getModel();
        deleteRows(model);

        int numberOfColumns = categoriesTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Category> list = hotel.getListCategories();

        Double priceServices = 0d;

        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).getName();

            Double price = list.get(i).getPrice();
            priceServices += price;
            rowData[1] = String.valueOf(price);

            model.addRow(rowData);
        }

        return priceServices;
    }
    
    private void errorPane(String message){
        JOptionPane.showMessageDialog(rootPane,
                message,
                "Chyba!", JOptionPane.ERROR_MESSAGE);
    }
    
    private void refreshCategories() {
        listCategories = hotel.getListCategories();
        listCategoriesNames = InputProcessor.getListOfNames(listCategories);
        categoryCb.setModel(new DefaultComboBoxModel<String>(listCategoriesNames.toArray(new String[0])));
    }
    
    public void refreshAll(){
        populateServicesTbl();
        populateCategoriesTbl();
        refreshCategories();
    }
    
    private void setImage(int index) {
        if (listImages.size() > 0) {
            pictureLbl.setIcon(listImages.get(index));
            currentImageId = index;
            numberLbl.setText((index + 1) + "/" + listImages.size());
        } else {
            pictureLbl.setIcon(null);
            currentImageId = index;
            numberLbl.setText("0/0");
        }
    }
}
