/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.gui;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import sk.stu.fiit.inputs.*;
import sk.stu.fiit.logic.*;

/**
 *
 * @author PeterSmrecek
 */
public class MainWindow extends javax.swing.JFrame {
    
    private static final Logger logger = Logger.getLogger(MainWindow.class.getName());
    
    private boolean customDate = false;
    private Calendar customCalendar = new GregorianCalendar();
    private SimpleDateFormat sdfTimeDate = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
    private SimpleDateFormat sdfRoom = new SimpleDateFormat("dd.MM.yyyy HH:mm");
    private Hotel hotel;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        BasicConfigurator.configure();
        dateTimeCounter();
        loadAction();
        updateAll();
        
       

//        logger.log(Level.INFO, "INFO1");
//        logger.info("INFO");
//        logger.debug("DEBUG");
//        logger.fatal("FATAL");
//        logger.error("ERROR");
//        logger.warn("WARN");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlsPnl = new javax.swing.JPanel();
        buttonsPnl = new javax.swing.JPanel();
        addCustomerBtn = new javax.swing.JButton();
        addReservationBtn = new javax.swing.JButton();
        cancelReservationBtn = new javax.swing.JButton();
        addAccommBtn = new javax.swing.JButton();
        addPaymentBtn = new javax.swing.JButton();
        customerHistoryBtn = new javax.swing.JButton();
        manageBtn = new javax.swing.JButton();
        customersScroll = new javax.swing.JScrollPane();
        customersTbl = new javax.swing.JTable();
        reservationsScroll = new javax.swing.JScrollPane();
        reservationsTbl = new javax.swing.JTable();
        accommScroll = new javax.swing.JScrollPane();
        accommTbl = new javax.swing.JTable();
        dateLbl = new javax.swing.JLabel();
        settingsPnl = new javax.swing.JPanel();
        changeDateBtn = new javax.swing.JButton();
        currentDateBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel");

        controlsPnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonsPnl.setLayout(new javax.swing.BoxLayout(buttonsPnl, javax.swing.BoxLayout.LINE_AXIS));

        addCustomerBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addCustomerBtn.setText("Pridať zákazníka");
        addCustomerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addCustomerBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addCustomerBtn);

        addReservationBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addReservationBtn.setText("Vytvoriť rezerváciu");
        addReservationBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addReservationBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addReservationBtn);

        cancelReservationBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cancelReservationBtn.setText("Zrušiť rezerváciu");
        cancelReservationBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cancelReservationBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(cancelReservationBtn);

        addAccommBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addAccommBtn.setText("Ubytovať");
        addAccommBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addAccommBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addAccommBtn);

        addPaymentBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addPaymentBtn.setText("Zaznamenať platbu");
        addPaymentBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addPaymentBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addPaymentBtn);

        customerHistoryBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerHistoryBtn.setText("História zákazníka");
        customerHistoryBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                customerHistoryBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(customerHistoryBtn);

        manageBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        manageBtn.setText("Manažment izieb");
        manageBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                manageBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(manageBtn);

        controlsPnl.add(buttonsPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 710, 1090, 40));

        customersScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka zákazníkov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        customersScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        customersTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customersTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno a priezvisko", "Počet aktívnych ubytovaní", "Počet aktívnych rezervácií"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTbl.getTableHeader().setReorderingAllowed(false);
        customersScroll.setViewportView(customersTbl);

        controlsPnl.add(customersScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 1090, 200));

        reservationsScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka rezervácií", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        reservationsScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        reservationsTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reservationsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Zákazník", "Izba", "Od", "Do"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reservationsTbl.getTableHeader().setReorderingAllowed(false);
        reservationsScroll.setViewportView(reservationsTbl);

        controlsPnl.add(reservationsScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 1090, 200));

        accommScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka ubytovaní", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        accommScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        accommTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        accommTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Zákazník", "Izba", "Od", "Do", "Zaplatené"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accommTbl.getTableHeader().setReorderingAllowed(false);
        accommScroll.setViewportView(accommTbl);
        if (accommTbl.getColumnModel().getColumnCount() > 0) {
            accommTbl.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        controlsPnl.add(accommScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 1090, 200));

        dateLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateLbl.setText("Dátum");
        controlsPnl.add(dateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 280, 50));

        settingsPnl.setAlignmentX(1.0F);
        settingsPnl.setLayout(new javax.swing.BoxLayout(settingsPnl, javax.swing.BoxLayout.LINE_AXIS));

        changeDateBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        changeDateBtn.setText("Zmeniť dátum");
        changeDateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                changeDateBtnMouseReleased(evt);
            }
        });
        settingsPnl.add(changeDateBtn);

        currentDateBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        currentDateBtn.setText("Aktuálny dátum");
        currentDateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                currentDateBtnMouseReleased(evt);
            }
        });
        settingsPnl.add(currentDateBtn);

        saveBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        saveBtn.setText("Uložiť");
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveBtnMouseReleased(evt);
            }
        });
        settingsPnl.add(saveBtn);

        loadBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        loadBtn.setText("Načítať");
        loadBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                loadBtnMouseReleased(evt);
            }
        });
        settingsPnl.add(loadBtn);

        controlsPnl.add(settingsPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 430, 50));

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlsPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 1116, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlsPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void addCustomerBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCustomerBtnMouseReleased
        // TODO add your handling code here:
        addCustomerAction();
    }//GEN-LAST:event_addCustomerBtnMouseReleased

    private void addReservationBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addReservationBtnMouseReleased
        // TODO add your handling code here:
        addReservationAction();
    }//GEN-LAST:event_addReservationBtnMouseReleased

    private void cancelReservationBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelReservationBtnMouseReleased
        // TODO add your handling code here:
        cancelReservationAction();
    }//GEN-LAST:event_cancelReservationBtnMouseReleased

    private void addAccommBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAccommBtnMouseReleased
        // TODO add your handling code here:
        addAccommAction();
    }//GEN-LAST:event_addAccommBtnMouseReleased

    private void addPaymentBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPaymentBtnMouseReleased
        // TODO add your handling code here:
        addPaymentAction();
    }//GEN-LAST:event_addPaymentBtnMouseReleased

    private void customerHistoryBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerHistoryBtnMouseReleased
        // TODO add your handling code here:
        customerHistoryAction();
    }//GEN-LAST:event_customerHistoryBtnMouseReleased

    private void manageBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manageBtnMouseReleased
        // TODO add your handling code here:
        manageAction();
    }//GEN-LAST:event_manageBtnMouseReleased

    private void changeDateBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeDateBtnMouseReleased
        // TODO add your handling code here:
        changeDateAction();
    }//GEN-LAST:event_changeDateBtnMouseReleased

    private void saveBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnMouseReleased
        // TODO add your handling code here:
        saveAction();
    }//GEN-LAST:event_saveBtnMouseReleased

    private void loadBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadBtnMouseReleased
        // TODO add your handling code here:
        loadAction();
    }//GEN-LAST:event_loadBtnMouseReleased

    private void currentDateBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentDateBtnMouseReleased
        // TODO add your handling code here:
        currentDateAction();
    }//GEN-LAST:event_currentDateBtnMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JScrollPane accommScroll;
    private javax.swing.JTable accommTbl;
    private javax.swing.JButton addAccommBtn;
    private javax.swing.JButton addCustomerBtn;
    private javax.swing.JButton addPaymentBtn;
    private javax.swing.JButton addReservationBtn;
    private javax.swing.JPanel buttonsPnl;
    private javax.swing.JButton cancelReservationBtn;
    private javax.swing.JButton changeDateBtn;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JPanel controlsPnl;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JButton currentDateBtn;
    private javax.swing.JButton customerHistoryBtn;
    private javax.swing.JScrollPane customersScroll;
    private javax.swing.JTable customersTbl;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JLabel dateLbl;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton loadBtn;
    private javax.swing.JButton manageBtn;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JScrollPane reservationsScroll;
    private javax.swing.JTable reservationsTbl;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveBtn;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel settingsPnl;
    // End of variables declaration//GEN-END:variables
    
    private void setCustomTimeDate() {
        try {
            Date startDate = sdfTimeDate.parse("05.12.1996 2:36:42");
            customCalendar.setTime(startDate);
            customDate = true;
        } catch (ParseException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void dateTimeCounter() {
        int behCyklus = 1;

        new Thread() {
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
                while (behCyklus == 1) {
                    
                    if (customDate) {
                        Date date = customCalendar.getTime();
                        dateLbl.setText(sdfTimeDate.format(date));

                        try {
                            Thread.sleep(1000);
                            customCalendar.setTimeInMillis(customCalendar.getTimeInMillis() + 1000);
//                        System.out.println("Spal som 1000");
                        } catch (InterruptedException ex) {
                            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        Calendar realCalendar = new GregorianCalendar();
                        Date date = realCalendar.getTime();
                        dateLbl.setText(sdfTimeDate.format(date));
                        
                        try {
                            Thread.sleep(100);
//                        System.out.println("Spal som 1000");
                        } catch (InterruptedException ex) {
                            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
//                        int day = calendar1.get(Calendar.DATE);
//                        int month = calendar1.get(Calendar.MONTH) + 1;
//                        int year = calendar1.get(Calendar.YEAR);
//
//                        int hour = calendar1.get(Calendar.HOUR);
//                        int minute = calendar1.get(Calendar.MINUTE);
//                        int second = calendar1.get(Calendar.SECOND);

//                        dateLbl.setText(String.format("%02d", day) + ". " + String.format("%02d", month) + ". " + String.format("%04d", year));
//                        timeLbl.setText(String.format("%02d", hour) + ":" + String.format("%02d", minute) + ":" + String.format("%02d", second));
                    }
                }
            }

        }.start();
    }

    private void addCustomerAction() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void addReservationAction() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void cancelReservationAction() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void addAccommAction() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void addPaymentAction() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void customerHistoryAction() {
        int customerTableIndex = getRow(customersTbl, "Nie je vybraný žiaden zákazník z tabuľky!");
        if (customerTableIndex == -1) {
            return;
        }
        
        new CustomerHistoriWindow(hotel.getListCustomers().get(customerTableIndex)).setVisible(true);
    }

    private void manageAction() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void changeDateAction() {
        setCustomTimeDate();
    }

    private void saveAction() {
        Serializer.serialize(hotel);
    }

    private void loadAction() {
        hotel = Serializer.deserialize();
        if (hotel == null) {
            hotel = new Hotel();
            InputsCreator.createInputs(hotel);
            System.out.println("Teraz sa nacitali cisto nove vstupy");
        }
    }

    private void currentDateAction() {
        customDate = false;
    }

    private void updateAll() {
        populateCustomersTbl();
        populateReservationsTbl();
        populateAccommTbl();
    }
    
    public void deleteRows(DefaultTableModel model) {
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }
    
    private void populateCustomersTbl() {
        DefaultTableModel model = (DefaultTableModel) customersTbl.getModel();
        deleteRows(model);

        int numberOfColumns = customersTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Customer> list = hotel.getListCustomers();
        
        for (int i = 0; i < list.size(); i++) {

            rowData[0] = list.get(i).getName();
            rowData[1] = list.get(i).getListReservations().size();
            rowData[2] = list.get(i).getListAccommodations().size();

            model.addRow(rowData);
        }
    }

    private void populateReservationsTbl() {
        DefaultTableModel model = (DefaultTableModel) reservationsTbl.getModel();
        deleteRows(model);

        int numberOfColumns = reservationsTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Reservation> list = hotel.getListReservations();

        for (int i = 0; i < list.size(); i++) {

            rowData[0] = list.get(i).getCustomer().getName();
            rowData[1] = list.get(i).getRoom().getId();
            rowData[2] = sdfRoom.format(list.get(i).getStartDate());
            rowData[3] = sdfRoom.format(list.get(i).getEndDate());

            model.addRow(rowData);
        }
    }

    private void populateAccommTbl() {
        DefaultTableModel model = (DefaultTableModel) accommTbl.getModel();
        deleteRows(model);

        int numberOfColumns = accommTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Accommodation> list = hotel.getListAccommodations();

        for (int i = 0; i < list.size(); i++) {

            rowData[0] = list.get(i).getCustomer().getName();
            rowData[1] = list.get(i).getRoom().getId();
            rowData[2] = sdfRoom.format(list.get(i).getStartDate());
            rowData[3] = sdfRoom.format(list.get(i).getEndDate());

            model.addRow(rowData);
        }
    }
    
    public int getRow(JTable table, String message) {
        int index = table.getSelectedRow();

        if (InputProcessor.isPositiveInt(index)) {
            return index;
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    message,
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
        }
        return -1;
    }
}
