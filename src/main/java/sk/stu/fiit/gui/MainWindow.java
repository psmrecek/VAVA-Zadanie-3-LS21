/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.gui;

import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import sk.stu.fiit.inputs.*;
import sk.stu.fiit.logic.*;

/**
 *
 * @author PeterSmrecek
 */
public class MainWindow extends javax.swing.JFrame {
    
    private static final Logger logger = Logger.getLogger(MainWindow.class.getName());
    
    private boolean customDate = false;
    private Calendar customCalendar = new GregorianCalendar();
    private SimpleDateFormat sdfTimeDate = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss"); //NOI18N
    private SimpleDateFormat sdfRoom = new SimpleDateFormat("dd.MM.yyyy HH:mm"); //NOI18N
    private Hotel hotel;
    private Date currentDateApp;
    private Date realDateApp;
    long diffInMillies = 0;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        BasicConfigurator.configure();
        dateTimeCounter();
        
        hotel = new Hotel();
        logger.info("New hotel created"); //NOI18N
        
        updateAll();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlsPnl = new javax.swing.JPanel();
        buttonsPnl = new javax.swing.JPanel();
        addCustomerBtn = new javax.swing.JButton();
        addReservationBtn = new javax.swing.JButton();
        cancelReservationBtn = new javax.swing.JButton();
        addAccommBtn = new javax.swing.JButton();
        addService = new javax.swing.JButton();
        addPaymentBtn = new javax.swing.JButton();
        customerHistoryBtn = new javax.swing.JButton();
        roomShowBtn = new javax.swing.JButton();
        addRoomOrCategoryBtn = new javax.swing.JButton();
        customersScroll = new javax.swing.JScrollPane();
        customersTbl = new javax.swing.JTable();
        reservationsScroll = new javax.swing.JScrollPane();
        reservationsTbl = new javax.swing.JTable();
        accommScroll = new javax.swing.JScrollPane();
        accommTbl = new javax.swing.JTable();
        dateLbl = new javax.swing.JLabel();
        settingsPnl = new javax.swing.JPanel();
        changeDateBtn = new javax.swing.JButton();
        currentDateBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        setTitle(bundle.getString("HOTEL")); // NOI18N

        controlsPnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonsPnl.setLayout(new javax.swing.BoxLayout(buttonsPnl, javax.swing.BoxLayout.LINE_AXIS));

        addCustomerBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addCustomerBtn.setText(bundle.getString("PRIDAŤ ZÁKAZNÍKA")); // NOI18N
        addCustomerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addCustomerBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addCustomerBtn);

        addReservationBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addReservationBtn.setText(bundle.getString("VYTVORIŤ REZERVÁCIU")); // NOI18N
        addReservationBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addReservationBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addReservationBtn);

        cancelReservationBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cancelReservationBtn.setText(bundle.getString("ZRUŠIŤ REZERVÁCIU")); // NOI18N
        cancelReservationBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cancelReservationBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(cancelReservationBtn);

        addAccommBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addAccommBtn.setText(bundle.getString("UBYTOVAŤ")); // NOI18N
        addAccommBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addAccommBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addAccommBtn);

        addService.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addService.setText(bundle.getString("VYUŽIŤ SLUŽBU")); // NOI18N
        addService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addServiceMouseReleased(evt);
            }
        });
        buttonsPnl.add(addService);

        addPaymentBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addPaymentBtn.setText(bundle.getString("ZAZNAMENAŤ PLATBU")); // NOI18N
        addPaymentBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addPaymentBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addPaymentBtn);

        customerHistoryBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerHistoryBtn.setText(bundle.getString("HISTÓRIA ZÁKAZNÍKA")); // NOI18N
        customerHistoryBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                customerHistoryBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(customerHistoryBtn);

        roomShowBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomShowBtn.setText(bundle.getString("ZOBRAZOVAČ IZIEB")); // NOI18N
        roomShowBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                roomShowBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(roomShowBtn);

        addRoomOrCategoryBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addRoomOrCategoryBtn.setText(bundle.getString("PRIDAŤ SLUŽBU, KATEGÓRIU ALEBO IZBU")); // NOI18N
        addRoomOrCategoryBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addRoomOrCategoryBtnMouseReleased(evt);
            }
        });
        buttonsPnl.add(addRoomOrCategoryBtn);

        controlsPnl.add(buttonsPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 710, 1320, 40));

        customersScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka zákazníkov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        customersScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        customersTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customersTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno a priezvisko", "Počet ubytovaní", "Počet rezervácií"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTbl.getTableHeader().setReorderingAllowed(false);
        customersScroll.setViewportView(customersTbl);

        controlsPnl.add(customersScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 1320, 200));

        reservationsScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka rezervácií", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        reservationsScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        reservationsTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reservationsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Zákazník", "Izba", "Od", "Do", "Prepadnutá"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reservationsTbl.getTableHeader().setReorderingAllowed(false);
        reservationsScroll.setViewportView(reservationsTbl);
        if (reservationsTbl.getColumnModel().getColumnCount() > 0) {
            reservationsTbl.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        controlsPnl.add(reservationsScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 1320, 200));

        accommScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka nezaplatených ubytovaní", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        accommScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        accommTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        accommTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Zákazník", "Izba", "Od", "Do", "Ukončené"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accommTbl.getTableHeader().setReorderingAllowed(false);
        accommScroll.setViewportView(accommTbl);
        if (accommTbl.getColumnModel().getColumnCount() > 0) {
            accommTbl.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        controlsPnl.add(accommScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 1320, 200));

        dateLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateLbl.setText(bundle.getString("DÁTUM")); // NOI18N
        controlsPnl.add(dateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 280, 50));

        settingsPnl.setAlignmentX(1.0F);
        settingsPnl.setLayout(new javax.swing.BoxLayout(settingsPnl, javax.swing.BoxLayout.LINE_AXIS));

        changeDateBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        changeDateBtn.setText(bundle.getString("ZMENIŤ DÁTUM")); // NOI18N
        changeDateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                changeDateBtnMouseReleased(evt);
            }
        });
        settingsPnl.add(changeDateBtn);

        currentDateBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        currentDateBtn.setText(bundle.getString("AKTUÁLNY DÁTUM")); // NOI18N
        currentDateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                currentDateBtnMouseReleased(evt);
            }
        });
        settingsPnl.add(currentDateBtn);

        saveBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        saveBtn.setText(bundle.getString("ULOŽIŤ")); // NOI18N
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveBtnMouseReleased(evt);
            }
        });
        settingsPnl.add(saveBtn);

        loadBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        loadBtn.setText(bundle.getString("NAČÍTAŤ")); // NOI18N
        loadBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                loadBtnMouseReleased(evt);
            }
        });
        settingsPnl.add(loadBtn);

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setText(bundle.getString("VZOROVÉ VSTUPY")); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });
        settingsPnl.add(jButton1);

        controlsPnl.add(settingsPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, 540, 50));

        fileMenu.setMnemonic('f');
        fileMenu.setText(bundle.getString("SÚBOR")); // NOI18N

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText(bundle.getString("KONIEC")); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText(bundle.getString("POMOCNÍK")); // NOI18N

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText(bundle.getString("O APLIKÁCIÍ")); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlsPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 1342, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlsPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addCustomerBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_addCustomerBtnMouseReleased
        // TODO add your handling code here:
        addCustomerAction();
    }//GEN-LAST:event_addCustomerBtnMouseReleased

    private void addReservationBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_addReservationBtnMouseReleased
        // TODO add your handling code here:
        addReservationAction();
    }//GEN-LAST:event_addReservationBtnMouseReleased

    private void cancelReservationBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_cancelReservationBtnMouseReleased
        // TODO add your handling code here:
        cancelReservationAction();
    }//GEN-LAST:event_cancelReservationBtnMouseReleased

    private void addAccommBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_addAccommBtnMouseReleased
        // TODO add your handling code here:
        addAccommAction();
    }//GEN-LAST:event_addAccommBtnMouseReleased

    private void addPaymentBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_addPaymentBtnMouseReleased
        // TODO add your handling code here:
        addPaymentAction();
    }//GEN-LAST:event_addPaymentBtnMouseReleased

    private void customerHistoryBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_customerHistoryBtnMouseReleased
        // TODO add your handling code here:
        customerHistoryAction();
    }//GEN-LAST:event_customerHistoryBtnMouseReleased

    private void roomShowBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_roomShowBtnMouseReleased
        // TODO add your handling code here:
        roomShowAction();
    }//GEN-LAST:event_roomShowBtnMouseReleased

    private void changeDateBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_changeDateBtnMouseReleased
        // TODO add your handling code here:
        changeDateAction();
    }//GEN-LAST:event_changeDateBtnMouseReleased

    private void saveBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_saveBtnMouseReleased
        // TODO add your handling code here:
        saveAction();
    }//GEN-LAST:event_saveBtnMouseReleased

    private void loadBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_loadBtnMouseReleased
        // TODO add your handling code here:
        loadAction();
    }//GEN-LAST:event_loadBtnMouseReleased

    private void currentDateBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_currentDateBtnMouseReleased
        // TODO add your handling code here:
        currentDateAction();
    }//GEN-LAST:event_currentDateBtnMouseReleased

    private void addRoomOrCategoryBtnMouseReleased(MouseEvent evt) {//GEN-FIRST:event_addRoomOrCategoryBtnMouseReleased
        // TODO add your handling code here:
        addRoomOrCategoryAction();
    }//GEN-LAST:event_addRoomOrCategoryBtnMouseReleased

    private void addServiceMouseReleased(MouseEvent evt) {//GEN-FIRST:event_addServiceMouseReleased
        // TODO add your handling code here:
        addServiceAction();
    }//GEN-LAST:event_addServiceMouseReleased

    private void exitMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton1MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        // TODO add your handling code here:
        hotel = InputsCreator.createInputs();
        updateAll();
    }//GEN-LAST:event_jButton1MouseReleased

    private void aboutMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        new AboutWindow().setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) { //NOI18N
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JMenuItem aboutMenuItem;
    javax.swing.JScrollPane accommScroll;
    javax.swing.JTable accommTbl;
    javax.swing.JButton addAccommBtn;
    javax.swing.JButton addCustomerBtn;
    javax.swing.JButton addPaymentBtn;
    javax.swing.JButton addReservationBtn;
    javax.swing.JButton addRoomOrCategoryBtn;
    javax.swing.JButton addService;
    javax.swing.JPanel buttonsPnl;
    javax.swing.JButton cancelReservationBtn;
    javax.swing.JButton changeDateBtn;
    javax.swing.JPanel controlsPnl;
    javax.swing.JButton currentDateBtn;
    javax.swing.JButton customerHistoryBtn;
    javax.swing.JScrollPane customersScroll;
    javax.swing.JTable customersTbl;
    javax.swing.JLabel dateLbl;
    javax.swing.JMenuItem exitMenuItem;
    javax.swing.JMenu fileMenu;
    javax.swing.JMenu helpMenu;
    javax.swing.JButton jButton1;
    javax.swing.JButton loadBtn;
    javax.swing.JMenuBar menuBar;
    javax.swing.JScrollPane reservationsScroll;
    javax.swing.JTable reservationsTbl;
    javax.swing.JButton roomShowBtn;
    javax.swing.JButton saveBtn;
    javax.swing.JPanel settingsPnl;
    // End of variables declaration//GEN-END:variables

    private void dateTimeCounter() {
        int behCyklus = 1;

        new Thread() {
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
                while (behCyklus == 1) {
                    
                    if (customDate) {

                        Calendar realCalendar = new GregorianCalendar();
                        realDateApp = realCalendar.getTime();
                        Date millis = new Date(realCalendar.getTimeInMillis() + diffInMillies);
                        currentDateApp = millis;
                        
                        dateLbl.setText(sdfTimeDate.format(currentDateApp));

                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException ex) {
                            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                    } else {
                        Calendar realCalendar = new GregorianCalendar();
                        currentDateApp = realCalendar.getTime();
                        realDateApp = currentDateApp;
                        dateLbl.setText(sdfTimeDate.format(currentDateApp));
                        
                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException ex) {
                            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }

        }.start();
    }

    private void addCustomerAction() {
        new AddCustomerWindow(this, hotel).setVisible(true);
    }

    private void addReservationAction() {
        new AddReservationWindow(this, hotel).setVisible(true);
    }

    private void cancelReservationAction() {
        int reservationTableIndex = getRow(reservationsTbl, java.util.ResourceBundle.getBundle("Bundle").getString("NIE JE VYBRANÁ ŽIADNA REZERVÁCIA Z TABUĽKY!"));
        if (reservationTableIndex == -1) {
            return;
        }
        
        Reservation reservation = hotel.getListReservations().get(reservationTableIndex);
        
        if (hotel.removeReservation(reservation)) {
            updateAll();
            JOptionPane.showMessageDialog(rootPane,
                    java.util.ResourceBundle.getBundle("Bundle").getString("REZERVÁCIA BOLA ÚSPEŠNE ZMAZANÁ"),
                    java.util.ResourceBundle.getBundle("Bundle").getString("ZMAZANÁ REZERVÁCIA"), JOptionPane.INFORMATION_MESSAGE);
            logger.info("Reservation canceled"); //NOI18N
        } else {
            updateAll();
            JOptionPane.showMessageDialog(rootPane,
                    java.util.ResourceBundle.getBundle("Bundle").getString("NEMOŽNO ZMAZAŤ REZERVÁCIU!"),
                    java.util.ResourceBundle.getBundle("Bundle").getString("CHYBA!"), JOptionPane.ERROR_MESSAGE);
            logger.info("Unable to cancel reservation"); //NOI18N
        }
    }

    private void addAccommAction() {
        new AddAccommodationWindow(this, hotel).setVisible(true);
    }

    private void addPaymentAction() {
        int accommTableIndex = getRow(accommTbl, java.util.ResourceBundle.getBundle("Bundle").getString("NIE JE VYBRANÝ ŽIADNE NEZAPLATENÉ UBYTOVANIE Z TABUĽKY!"));
        if (accommTableIndex == -1) {
            return;
        }
        
        Accommodation accommodation = hotel.getListAccommodationsUnpaid().get(accommTableIndex);
        
        new AddPaymentWindow(this, accommodation).setVisible(true);
    }

    private void customerHistoryAction() {
        int customerTableIndex = getRow(customersTbl, java.util.ResourceBundle.getBundle("Bundle").getString("NIE JE VYBRANÝ ŽIADEN ZÁKAZNÍK Z TABUĽKY!"));
        if (customerTableIndex == -1) {
            return;
        }
        
        new CustomerHistoryWindow(hotel.getListCustomers().get(customerTableIndex)).setVisible(true);
    }

    private void roomShowAction() {
        new RoomInspectorWindow(hotel).setVisible(true);
    }

    private void changeDateAction() {
//        setCustomTimeDate();
        String dateString = JOptionPane.showInputDialog(rootPane,
                java.util.ResourceBundle.getBundle("Bundle").getString("ZADAJTE DÁTUM VO FORMÁTE DD.MM.YYYY HH:MM:SS"),
                java.util.ResourceBundle.getBundle("Bundle").getString("VLASTNÝ DÁTUM"), JOptionPane.QUESTION_MESSAGE);
        Date inputDate;
        try {
            inputDate = sdfTimeDate.parse(dateString);
            diffInMillies = inputDate.getTime() - realDateApp.getTime();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,
                    java.util.ResourceBundle.getBundle("Bundle").getString("NESPRÁVNY FORMÁT DÁTUMU"),
                    java.util.ResourceBundle.getBundle("Bundle").getString("CHYBA!"), JOptionPane.ERROR_MESSAGE);
            logger.warn("Wrong date format"); //NOI18N
            return;
        }
        logger.info("Date changed"); //NOI18N
        customDate = true;
        updateAll();
    }

    private void saveAction() {
        Serializer.serialize(hotel);
        updateAll();
    }

    private void loadAction() {
        hotel = Serializer.deserialize();
        updateAll();
    }

    private void currentDateAction() {
        customDate = false;
        updateAll();
        logger.info("Real time loaded"); //NOI18N
    }

    public void updateAll() {
        populateCustomersTbl();
        populateReservationsTbl();
        populateAccommTbl();
    }
    
    private void deleteRows(DefaultTableModel model) {
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }
    
    private void populateCustomersTbl() {
        DefaultTableModel model = (DefaultTableModel) customersTbl.getModel();
        deleteRows(model);

        int numberOfColumns = customersTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Customer> list = hotel.getListCustomers();
        
        for (int i = 0; i < list.size(); i++) {

            rowData[0] = list.get(i).getName();
            rowData[1] = list.get(i).getListReservations().size();
            rowData[2] = list.get(i).getListAccommodations().size();

            model.addRow(rowData);
        }
    }

    private void populateReservationsTbl() {
        DefaultTableModel model = (DefaultTableModel) reservationsTbl.getModel();
        deleteRows(model);

        int numberOfColumns = reservationsTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Reservation> list = hotel.getListReservations();

        for (int i = 0; i < list.size(); i++) {
            Date compareDate = getCurrentDateApp();
            Date start = list.get(i).getStartDate();
            Date end = list.get(i).getEndDate();
            
            rowData[0] = list.get(i).getCustomer().getName();
            rowData[1] = list.get(i).getRoom().getName();
            rowData[2] = sdfRoom.format(start);
            rowData[3] = sdfRoom.format(end);
            
            if (end.after(compareDate)) {
                rowData[4] = false;
            } else {
                rowData[4] = true;
            }
            model.addRow(rowData);
        }
    }

    private void populateAccommTbl() {
        DefaultTableModel model = (DefaultTableModel) accommTbl.getModel();
        deleteRows(model);
        
        int numberOfColumns = accommTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Accommodation> list = hotel.getListAccommodationsUnpaid();
        Date currentDateTbl = getCurrentDateApp();

        for (int i = 0; i < list.size(); i++) {

            rowData[0] = list.get(i).getCustomer().getName();
            rowData[1] = list.get(i).getRoom().getName();
            rowData[2] = sdfRoom.format(list.get(i).getStartDate());
            rowData[3] = sdfRoom.format(list.get(i).getEndDate());
            rowData[4] = currentDateTbl.after(list.get(i).getEndDate());

            model.addRow(rowData);
        }
    }
    
    private int getRow(JTable table, String message) {
        int index = table.getSelectedRow();

        if (InputProcessor.isPositiveInt(index)) {
            return index;
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    message,
                    java.util.ResourceBundle.getBundle("Bundle").getString("CHYBA!"), JOptionPane.ERROR_MESSAGE);
        }
        return -1;
    }

    private void addRoomOrCategoryAction() {
        new AddCategoryRoomServiceWindow(hotel).setVisible(true);
    }

    public Date getCurrentDateApp() {
        try {
            Thread.sleep(150);
        } catch (InterruptedException ex) {
            logger.fatal("Current time unavailable"); //NOI18N
        }
        return currentDateApp;
    }

    public Hotel getHotel() {
        return hotel;
    }

    private void addServiceAction() {
        int accommTableIndex = getRow(accommTbl, java.util.ResourceBundle.getBundle("Bundle").getString("NIE JE VYBRANÝ ŽIADNE NEZAPLATENÉ UBYTOVANIE Z TABUĽKY!"));
        if (accommTableIndex == -1) {
            return;
        }

        Accommodation accommodation = hotel.getListAccommodationsUnpaid().get(accommTableIndex);

        new AddServiceWindow(accommodation, hotel).setVisible(true);
    }
   
}
